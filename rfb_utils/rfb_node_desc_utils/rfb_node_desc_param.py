"""Specialize shader parameter parsing for maya."""

# -----------------------------------------------------------------------------
#
# Copyright (c) 1986-2020 Pixar. All rights reserved.
#
# The information in this file (the "Software") is provided for the exclusive
# use of the software licensees of Pixar ("Licensees").  Licensees have the
# right to incorporate the Software into other products for use by other
# authorized software licensees of Pixar, without fee. Except as expressly
# permitted herein, the Software may not be disclosed to third parties, copied
# or duplicated in any form, in whole or in part, without the prior written
# permission of Pixar.
#
# The copyright notices in the Software and this entire statement, including the
# above license grant, this restriction and the following disclaimer, must be
# included in all copies of the Software, in whole or in part, and all permitted
# derivative works of the Software, unless such copies or derivative works are
# solely in the form of machine-executable object code generated by a source
# language processor.
#
# PIXAR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL PIXAR BE
# LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
# OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
# CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  IN NO CASE WILL
# PIXAR'S TOTAL LIABILITY FOR ALL DAMAGES ARISING OUT OF OR IN CONNECTION WITH
# THE USE OR PERFORMANCE OF THIS SOFTWARE EXCEED $50.
#
# Pixar
# 1200 Park Ave
# Emeryville CA 94608
#
# -----------------------------------------------------------------------------
#
# Id:$

from collections import OrderedDict
# pylint: disable=import-error
from ..node_desc_base.node_desc_param import (NodeDescParam,
                                        NodeDescParamXML,
                                        NodeDescParamOSL,
                                        NodeDescParamJSON)

# Override static class variable
NodeDescParam.optional_attrs = NodeDescParam.optional_attrs + ['uiStruct']
NodeDescParamJSON.keywords = NodeDescParamJSON.keywords + ['uiStruct', 'do_not_display']

# Globals
INTERP_RMAN_TO_MAYA = {'linear': 1,
                       'catmull-rom': 2,
                       'bspline': 3,
                       'constant': 0,
                       'none': 0}


def blender_finalize(obj):
    """Post-process some parameters for Blender.
    """
    if obj.type == 'bxdf':
        # every bxdf parameter will use a "mayaLink" widget, which is a color
        # widget typically taking an incoming connection from an "outColor"
        # attribute.
        obj.widget = 'mayaLink'
        obj.default = (0, 0, 0)

    # mark for desc
    if getattr(obj, 'uiStruct', None):
        obj.has_ui_struct = True

    if obj.type in ['int', 'matrix']:
        # these are NEVER connectable in Maya
        obj.connectable = False

    if hasattr(obj, 'help'):
        obj.help = obj.help.replace('"', '\\"')

class RfbNodeDescParamXML(NodeDescParamXML):
    """Specialize NodeDescParamXML for Blender"""

    def __init__(self, *args, **kwargs):
        super(RfbNodeDescParamXML, self).__init__(*args, **kwargs)
        blender_finalize(self)

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    def _set_widget(self, pdata):
        super(RfbNodeDescParamXML, self)._set_widget(pdata)

class RfbNodeDescParamOSL(NodeDescParamOSL):
    """Specialize NodeDescParamOSL for Blender"""

    def __init__(self, *args, **kwargs):
        super(RfbNodeDescParamOSL, self).__init__(*args, **kwargs)
        blender_finalize(self)

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value

    def _set_widget(self, pdata):
        super(RfbNodeDescParamOSL, self)._set_widget(pdata)


class RfbNodeDescParamJSON(NodeDescParamJSON):
    """Specialize NodeDescParamJSON for Blender"""

    keywords = NodeDescParamJSON.keywords + ['panel', 'inheritable', 
                'inherit_true_value', 'update_function_name', 'update_function']    

    @staticmethod
    def valid_keyword(kwd):
        """Return True if the keyword is in the list of known tokens."""
        return kwd in RfbNodeDescParamJSON.keywords                

    def __init__(self, *args, **kwargs):
        super(RfbNodeDescParamJSON, self).__init__(*args, **kwargs)
        blender_finalize(self)

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        self._name = value
